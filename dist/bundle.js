!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},i.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var n,o=function(){function t(t,e){this.x=t,this.y=e,this.nextField=void 0}return t.prototype.detectCollision=function(t){return this.x===t.x&&this.y===t.y},t}();!function(t){t[t.UP=0]="UP",t[t.RIGHT=1]="RIGHT",t[t.DOWN=2]="DOWN",t[t.LEFT=3]="LEFT"}(n||(n={}));var r,s=function(){function t(){}return t.GAME_WIDTH=20,t.GAME_HEIGHT=20,t.FIELD_SIZE=20,t}(),h=function(){function t(t){this.head=new o(2,7),this.tail=[],this.size=0,this.game=t}return t.prototype.draw=function(t){t.fillStyle="red",this.drawField(this.head,t,s.FIELD_SIZE);for(var e=0;e<this.tail.length;e++)this.drawField(this.tail[e],t,s.FIELD_SIZE)},t.prototype.changeDirection=function(t){t===n.LEFT&&this.direction===n.RIGHT||t===n.UP&&this.direction===n.DOWN||t===n.DOWN&&this.direction===n.UP||t===n.RIGHT&&this.direction===n.LEFT||(this.direction=t)},t.prototype.move=function(){void 0!==this.direction&&(this.tail.push(this.head),this.head=this.getNext(),this.head.detectCollision(this.game.food)&&this.size++,this.tail.length>this.size&&this.tail.splice(0,1))},t.prototype.snakeSlidesIntoItself=function(){for(var t=0;t<this.tail.length;t++)if(this.head.detectCollision(this.tail[t]))return!0;return!1},t.prototype.getNext=function(){switch(this.direction){case n.UP:return this.head.y-1<1?new o(this.head.x,s.GAME_HEIGHT):new o(this.head.x,this.head.y-1);case n.RIGHT:return this.head.x+1>s.GAME_WIDTH?new o(1,this.head.y):new o(this.head.x+1,this.head.y);case n.DOWN:return this.head.y===s.GAME_HEIGHT?new o(this.head.x,1):new o(this.head.x,this.head.y+1);case n.LEFT:return this.head.x-1==0?new o(s.GAME_WIDTH,this.head.y):new o(this.head.x-1,this.head.y)}},t.prototype.drawField=function(t,e,i){e.fillRect((t.x-1)*i,(t.y-1)*i,i,i)},t}(),c=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e.prototype.draw=function(t){t.fillStyle="green",t.fillRect((this.x-1)*s.FIELD_SIZE,(this.y-1)*s.FIELD_SIZE,s.FIELD_SIZE,s.FIELD_SIZE)},e}(o);i.d(e,"SnakeGame",function(){return d});var d=function(){function t(){var t=this,e=document.getElementById("snake");this.ctx=e.getContext("2d"),this.snake=new h(this),this.food=new a(4,4),this.draw(),setInterval(function(){t.nextStep()},100),this.keyboardInput(),this.score=0}return t.prototype.nextStep=function(){this.snake.move(),this.draw()},t.prototype.snakeFoundFood=function(){this.placeNewFood(),this.increaseScore()},t.prototype.placeNewFood=function(){},t.prototype.increaseScore=function(){this.score++},t.prototype.draw=function(){this.ctx.fillStyle="grey",this.ctx.fillRect(0,0,s.GAME_WIDTH*s.FIELD_SIZE,s.GAME_HEIGHT*s.FIELD_SIZE),this.food.draw(this.ctx),this.snake.draw(this.ctx)},t.prototype.startGame=function(){},t.prototype.keyboardInput=function(){var t=this;document.addEventListener("keydown",function(e){37===e.keyCode?t.snake.changeDirection(n.LEFT):38===e.keyCode?t.snake.changeDirection(n.UP):39===e.keyCode?t.snake.changeDirection(n.RIGHT):40===e.keyCode&&t.snake.changeDirection(n.DOWN)})},t}();new d}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,